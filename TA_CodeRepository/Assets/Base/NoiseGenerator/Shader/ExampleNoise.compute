//---------------------------------------------------------------------------------------------------------
// Program Declarations & I/O Variables
//---------------------------------------------------------------------------------------------------------
#pragma kernel Noise2DGen
#pragma kernel Noise3D1Gen
#pragma kernel Noise3D2Gen
#pragma kernel Noise3DGen_Simplex

RWTexture2D<float4> Noise2D;
RWTexture3D<float4> Noise3D1;
RWTexture3D<float4> Noise3D2;
RWTexture3D<float> Noise3D3;

float Tex3D1Res;
float Tex3D2Res;
float Tex3D3Res;
float Tex2DRes;

//---------------------------------------------------------------------------------------------------------
// Math Functions
//---------------------------------------------------------------------------------------------------------
float3 interpolationC2(float3 x){ return x*x*x*(x*(x*6.0 - 15.0) + 10.0);}

float setRange(float value, float low, float high){ return saturate((value-low)/(high-low)); }

float3 setRangesSigned(float3 values, float low, float high){ return (values-low)/(high-low);}

float dilatePerlinWorley(float p, float w, float x){
	float curve = 0.75;
	if(x < 0.5){
		x /= 0.5;
		float n = p + w * x;
		return n * lerp(1, 0.5, pow(x,curve));
	}
	else{
		x = (x-0.5)/0.5;
		float n = w + p *(1.0 - x);
		return n * lerp(0.5, 1.0, pow(x, 1.0/curve));
	}
}


//---------------------------------------------------------------------------------------------------------
// Perlin Noise
//---------------------------------------------------------------------------------------------------------
void perlinHash(float3 gridcell, float s, bool tile,
				out float4 lowzHash0, out float4 lowzHash1, out float4 lowzHash2,
				out float4 highzHash0, out float4 highzHash1, out float4 highzHash2 )
{
	const float2 OFFSET = float2( 50.0, 161.0 );
	const float DOMAIN = 69.0;
	const float3 SOMELARGEFLOATS = float3(635.298681, 682.357502, 668.926525);
	const float3 ZINC = float3(48.500388, 65.294118, 63.934599);

	gridcell.xyz =  gridcell.xyz - floor(gridcell.xyz * (1.0 / DOMAIN)) * DOMAIN;
	float d = DOMAIN - 1.5;
	float3 gridcellInc1 = step(gridcell, float3(d,d,d)) * (gridcell + 1.0);

	gridcellInc1 = tile ? gridcellInc1 % s : gridcellInc1;

	float4 p = float4(gridcell.xy, gridcellInc1.xy) + OFFSET.xyxy;
	p *= p;
	p = p.xzxz * p.yyww;
	float3 lowzMod = float3(1.0 / (SOMELARGEFLOATS.xyz + gridcell.zzz * ZINC.xyz));
	float3 highzMod = float3(1.0 / (SOMELARGEFLOATS.xyz + gridcellInc1.zzz * ZINC.xyz));
	lowzHash0 = frac(p*lowzMod.xxxx);
	highzHash0 = frac(p*highzMod.xxxx);
	lowzHash1 = frac(p*lowzMod.yyyy);
	highzHash1 = frac(p*highzMod.yyyy);
	lowzHash2 = frac(p*lowzMod.zzzz);
	highzHash2 = frac(p*highzMod.zzzz);
}

float perlin(float3 p, float s, bool tile){
	p *= s;

	float3 pI = floor(p);
	float3 pI2 = floor(p);
	float3 pF = p - pI;
	float3 pFMin1 = pF - 1.0;

	float4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;
	perlinHash(pI2, s, tile, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1);

	float4 gradx0 = hashx0 - 0.49999;
	float4 grady0 = hashy0 - 0.49999;
	float4 gradz0 = hashz0 - 0.49999;
	float4 gradx1 = hashx1 - 0.49999;
	float4 grady1 = hashy1 - 0.49999;
	float4 gradz1 = hashz1 - 0.49999;
	float4 gradResults0 = rsqrt(gradx0 * gradx0 + grady0 * grady0 + gradz0 * gradz0) * (float2(pF.x, pFMin1.x).xyxy * gradx0 + float2(pF.y, pFMin1.y).xxyy * grady0 + pF.zzzz * gradz0);
	float4 gradResults1 = rsqrt(gradx1 * gradx1 + grady1 * grady1 + gradz1 * gradz1) * (float2(pF.x, pFMin1.x).xyxy * gradx1 + float2(pF.y, pFMin1.y).xxyy * grady1 + pFMin1.zzzz * gradz1);

	float3 blend = interpolationC2(pF);
	float4 res0 = lerp(gradResults0, gradResults1, blend.z);
	float4 blend2 = float4(blend.xy, float2(1.0 - blend.xy));
	float final = dot(res0, blend2.zxzx * blend2.wwyy);
	final *= 1.0/sqrt(0.75);
	return ((final * 1.5) + 1.0) * 0.5;
}

float perlin(float3 p){
	return perlin(p, 1, false);
}

float perlin5(float3 p, bool tile){
	float3 xyz = p;
	float amplitudeFactor = 0.5;
	float frequencyFactor = 2.0;

	float a = 1.0;
	float val = 0.0;
	val += a * perlin(xyz).r; a *= amplitudeFactor; xyz *= (frequencyFactor + 0.02);
	val += a * perlin(xyz).r; a *= amplitudeFactor; xyz *= (frequencyFactor + 0.03);
	val += a * perlin(xyz).r; a *= amplitudeFactor; xyz *= (frequencyFactor + 0.01);
	val += a * perlin(xyz).r; a *= amplitudeFactor; xyz *= (frequencyFactor + 0.01);
	val += a * perlin(xyz).r;

	return val;
}

float perlin7(float3 p, float s){
	float3 xyz = p;
	float f = 1.0;
	float a = 1.0;

	float val = 0.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;
	val += a * perlin(xyz, s*f, true).r; a *= 0.5; f*= 2.0;

	return val;
}


//---------------------------------------------------------------------------------------------------------
// Curl Noise
//---------------------------------------------------------------------------------------------------------
float3 encodeCurl(float3 c){
	return (c + 1.0) * 0.5;
}

float3 curlNoise(float3 p){
	float e = 0.05;
	float n1, n2, a, b;
	float3 c;

	n1 = perlin5(p.xyz + float3(0,e,0), true);
	n2 = perlin5(p.xyz + float3(0,-e,0), true);
	a = (n1-n2)/(2*e);
	n1 = perlin5(p.xyz + float3(0,0,e), true);
	n2 = perlin5(p.xyz + float3(0,0,-e), true);
	b = (n1-n2)/(2*e);

	c.x = a - b;

	n1 = perlin5(p.xyz + float3(0,0,e), true);
	n2 = perlin5(p.xyz + float3(0,0,-e), true);
	a = (n1-n2)/(2*e);
	n1 = perlin5(p.xyz + float3(e,0,0), true);
	n2 = perlin5(p.xyz + float3(-e,0,0), true);
	b = (n1-n2)/(2*e);

	c.y = a - b;

	n1 = perlin5(p.xyz + float3(e,0,0), true);
	n2 = perlin5(p.xyz + float3(-e,0,0), true);
	a = (n1-n2)/(2*e);
	n1 = perlin5(p.xyz + float3(0,e,0), true);
	n2 = perlin5(p.xyz + float3(0,-e,0), true);
	b = (n1-n2)/(2*e);

	c.z = a - b;

	return c;
}

//---------------------------------------------------------------------------------------------------------
// Cellular Noise
//---------------------------------------------------------------------------------------------------------
float3 voronoi_hash(float3 x, float s){
	x = x % s;
	x = float3(dot(x, float3(127.1, 311.7, 74.7)),
				dot(x, float3(269.5,183.3,246.1)),
				dot(x, float3(113.5,271.9,124.6)));
	return frac(sin(x) * 43758.5453123);
}

float3 voronoi( in float3 x, float s, bool inverted){
	x *= s;
	x += 0.5;
	float3 p = floor(x);
	float3 f = frac(x);

	float id = 0.0;
	float2 res = float2(1.0, 1.0);
	for(int k = -1; k <= 1; k++){
		for(int j = -1; j <= 1; j++){
			for(int i = -1; i <= 1; i++){
				float3 b = float3(i,j,k);
				float3 r = float3(b) - f + voronoi_hash(p+b, s);
				float d = dot(r,r);

				if(d < res.x){
					id = dot(p+b, float3(1.0, 57.0, 113.0));
					res = float2(d, res.x);
				}
				else if(d < res.y){
					res.y = d;
				}
			}
		}
	}
	float2 result = res;
	id = abs(id);
	if(inverted)
		return float3(1.0 - result, id);
	else
		return float3(result, id);
}

float worley3(float3 p, float s){
	float3 xyz = p;

	float val1 = voronoi(xyz, 1.0 * s, true).r;
	float val2 = voronoi(xyz, 2.0 * s, false).r;
	float val3 = voronoi(xyz, 4.0 * s, false).r;

	val1 = saturate(val1);
	val2 = saturate(val2);
	val3 = saturate(val3);

	float worleyVal = val1;
	worleyVal = worleyVal - val2 * 0.3;
	worleyVal = worleyVal - val3 * 0.3;

	return worleyVal;	
}

//---------------------------------------------------------------------------------------------------------
// Generator Functions
//---------------------------------------------------------------------------------------------------------

//Needs to be passed in to the C# script via the inspector
[numthreads(8,8,8)]
void Noise3D1Gen (uint3 id : SV_DispatchThreadID)
{
	float perlinToWorleyRatio = 0.3;

	float tex1RPerlinLow 	=  0.3;
	float tex1RPerlinHigh 	=  1.4;
	float tex1RWorleyLow 	= -0.3;
	float tex1RWorleyHigh 	=  1.3;
	float tex1GBAWorleyLow	= -0.4;
	float tex1GBAWorleyHigh =  1.0;

	float3 xyz = (float3)id.xyz/Tex3D1Res;

	float perlinR = perlin7(xyz, 4.0);
	float worleyR = worley3(xyz, 6.0);
	float worleyG = worley3(xyz, 6.0);
	float worleyB = worley3(xyz, 12.0);
	float worleyA = worley3(xyz, 24.0);

	perlinR = setRange(perlinR, tex1RPerlinLow, tex1RPerlinHigh);
	worleyR = setRange(worleyR, tex1RWorleyLow, tex1RWorleyHigh);
	worleyG = setRange(worleyG, tex1GBAWorleyLow, tex1GBAWorleyHigh);
	worleyB = setRange(worleyB, tex1GBAWorleyLow, tex1GBAWorleyHigh);
	worleyA = setRange(worleyA, tex1GBAWorleyLow, tex1GBAWorleyHigh);

	float worleyPerlin = dilatePerlinWorley(perlinR, worleyR, perlinToWorleyRatio);

	Noise3D1[id.xyz] = float4(worleyPerlin, 1.0-worleyG, 1.0-worleyB, 1.0-worleyA);
	// DEBUG
	//Noise3D1[id.xyz] = float4(worleyPerlin, worleyPerlin, worleyPerlin, 1.0);
	//Noise3D1[id.xyz] = float4(1.0-worleyG, 1.0-worleyG, 1.0-worleyG, 1.0);
	//Noise3D1[id.xyz] = float4(1.0-worleyB, 1.0-worleyB, 1.0-worleyB, 1.0);
	//Noise3D1[id.xyz] = float4(1.0-worleyA, 1.0-worleyA, 1.0-worleyA, 1.0);
}

//Needs to be passed in to the C# script via the inspector
[numthreads(8,8,8)]
void Noise3D2Gen (uint3 id : SV_DispatchThreadID)
{
	float tex2Low = -0.2;
	float tex2High = 1.0;

	float3 xyz = (float3)id.xyz/Tex3D2Res;

	float worleyR = worley3(xyz, 10);
	float worleyG = worley3(xyz, 15);
	float worleyB = worley3(xyz, 20);
	float worleyA = worley3(xyz, 10);

	worleyR = setRange(worleyR, tex2Low, tex2High);
	worleyG = setRange(worleyG, tex2Low, tex2High);
	worleyB = setRange(worleyB, tex2Low, tex2High);
	worleyA = setRange(worleyA, tex2Low, tex2High);

	Noise3D2[id.xyz] = float4(worleyR, worleyG, worleyB, worleyA);
	// DEBUG
	//Noise3D2[id.xyz] = float4(worleyR, worleyR, worleyR, 1.0);
	//Noise3D2[id.xyz] = float4(worleyG, worleyG, worleyG, 1.0);
	//Noise3D2[id.xyz] = float4(worleyB, worleyB, worleyB, 1.0);
	//Noise3D2[id.xyz] = float4(worleyA, worleyA, worleyA, 1.0);
}

//Needs to be passed in to the C# script via the inspector
[numthreads(16,16,1)]
void Noise2DGen (uint3 id : SV_DispatchThreadID)
{
	float curlLow 	= -0.5;
	float curlHigh 	=  3.0;

	float3 xyz = float3((float2)id.xy/Tex2DRes, 0);

	float3 curlValues = curlNoise(xyz * 3);
	curlValues = setRangesSigned(curlValues, curlLow, curlHigh);

	Noise2D[id.xy] = float4(encodeCurl(curlValues), 0);
	// DEBUG
	//Noise2D[id.xy] = float4(encodeCurl(curlValues), 1.0);
}


//simplex
float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }
float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }
float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }
float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }
float snoise( float3 v )
{
	const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
	float3 i = floor( v + dot( v, C.yyy ) );
	float3 x0 = v - i + dot( i, C.xxx );
	float3 g = step( x0.yzx, x0.xyz );
	float3 l = 1.0 - g;
	float3 i1 = min( g.xyz, l.zxy );
	float3 i2 = max( g.xyz, l.zxy );
	float3 x1 = x0 - i1 + C.xxx;
	float3 x2 = x0 - i2 + C.yyy;
	float3 x3 = x0 - 0.5;
	i = mod3D289( i);
	float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
	float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
	float4 x_ = floor( j / 7.0 );
	float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
	float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
	float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
	float4 h = 1.0 - abs( x ) - abs( y );
	float4 b0 = float4( x.xy, y.xy );
	float4 b1 = float4( x.zw, y.zw );
	float4 s0 = floor( b0 ) * 2.0 + 1.0;
	float4 s1 = floor( b1 ) * 2.0 + 1.0;
	float4 sh = -step( h, 0.0 );
	float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
	float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
	float3 g0 = float3( a0.xy, h.x );
	float3 g1 = float3( a0.zw, h.y );
	float3 g2 = float3( a1.xy, h.z );
	float3 g3 = float3( a1.zw, h.w );
	float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
	g0 *= norm.x;
	g1 *= norm.y;
	g2 *= norm.z;
	g3 *= norm.w;
	float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
	m = m* m;
	m = m* m;
	float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
	return 42.0 * dot( m, px);
}

[numthreads(8,8,8)]
void Noise3DGen_Simplex (uint3 id : SV_DispatchThreadID)
{
	float R = snoise(id.xyz * 0.05); //如256X256X256的3D RT中保存了（0,0,0）到（255 * 0.05，255 * 0.05， 255 * 0.05）范围内的噪声值
	R = R * 0.5 + 0.5;

	Noise3D3[id.xyz] = R;
}